{
  "root": true,
  "settings": {
    "react": {
      "version": "99" // HACK: this is to prevent eslint from complaining about React's version
    }
  },
  "env": {
    "es2021": true,
    "jest": true,
    "browser": true
  },
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "prettier",
    "plugin:@typescript-eslint/recommended"
  ],
  "parserOptions": {
    "sourceType": "module",
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "impliedStrict": true,
      "jsx": true
    }
  },
  "globals": {
    "React": true,
    "JSX": true
  },
  "plugins": ["@typescript-eslint", "import", "prettier"],
  "rules": {
    // NOTE: Please annotate all exceptions with a reason. ("because...")
    "camelcase": "off", // we have a lot of properties and interfaces that use underscores
    "no-use-before-define": "off", // because we put Styled Components definitions at the bottom
    "no-underscore-dangle": "off", // because we use _ as a prefix quite a bit in the api responses
    "no-prototype-builtins": "off", // because our code only touches objects with hardcoded keys
    "import/no-unresolved": "off", // because we use tsconfig's path aliases
    "import/extensions": "off", // because we don't care about the extension
    "import/prefer-default-export": "off", // because we prefer named exports over default exports
    "react/react-in-jsx-scope": "off", // see https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#removing-unused-react-imports
    "no-shadow": "off", // because we must disable the base rule as it can report incorrect errors (see rule below where it is turned back on...)
    "react/jsx-filename-extension": ["error", { "extensions": [".jsx", ".tsx"] }], // because we want to allow JSX in .tsx files
    "react/require-default-props": "off", // because we're ok with dealing with undefined props in components, especially for booleans
    "react/jsx-props-no-spreading": "off", // because we use it sparingly anyway and it's a pain to avoid in legit cases
    "import/order": "warn", // because an error is a bit overkill for ordering imports
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "prettier/prettier": [
      "warn",
      {
        "trailingComma": "all", // makes adding new items to arrays easier
        "singleQuote": true, // helps distinguish property values from quotes in strings
        "printWidth": 120 // just preference
      }
    ],
    "@typescript-eslint/ban-types": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-var-requires": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-shadow": "warn",
    "consistent-return": "warn",
    "default-case": "warn",
    "func-names": "warn",
    "import/no-cycle": "warn",
    "import/no-default-export": "warn",
    "jsx-a11y/click-events-have-key-events": "warn",
    "jsx-a11y/no-static-element-interactions": "warn",
    "no-case-declarations": "warn",
    "no-empty": "warn",
    "no-irregular-whitespace": "warn",
    "no-nested-ternary": "warn",
    "no-param-reassign": "warn",
    "no-redeclare": "warn",
    "no-restricted-syntax": "warn",
    "no-return-assign": "warn",
    "no-self-assign": "warn",
    "no-unused-expressions": "warn",
    "no-unused-vars": "warn",
    "radix": "warn",
    "react-hooks/exhaustive-deps": "warn",
    "react/default-props-match-prop-types": "warn",
    "react/destructuring-assignment": "warn",
    "react/jsx-pascal-case": "warn",
    "react/no-array-index-key": "warn",
    "react/no-danger": "warn",
    "react/no-unescaped-entities": "warn",
    "react/no-unused-prop-types": "warn",
    "react/prop-types": "warn",
    "jsx-a11y/no-noninteractive-element-interactions": "off"
  }
}
